// ---------------------------------------------------------------------
// flipper.less
// ------------
// @description LESS mixin to apply flipper anywhere.
// @layer component
// ---------------------------------------------------------------------


// Flipper mixin for the plugin.
.mix-flipper(@base: flipper, @flipFromRight: true, @duration: 0.3s, @modalHeight: 400px, @modalWidth: 400px, @bgFront: #ccc, @bgBack: #aaa) {
	.@{base} {
		perspective: 1000px;
		position: relative;

		&__container {
			height: inherit;
			width: 100%;
			will-change: transform;
			transform-style: preserve-3d;
			transition: transform @duration;
			transition-timing-function: cubic-bezier(0.6, 0, 0.2, 1.3);

			.@{base}--flipped & {
				.mix-getFlipperTransformValue(@flipFromRight, false);
			}

			&--modal {
				display: flex;
				pointer-events: initial;
				will-change: left, top, height, width, transform, box-shadow;
				transform: rotateY(0deg) translate(0, 0);
				transition: left @duration, top @duration, height @duration, width @duration, transform @duration, box-shadow @duration;
				transition-timing-function: cubic-bezier(0.6, 0, 0.2, 1.3);

				&.@{base}--flipped {
					left: 50% !important;
					top: 50% !important;
					height: @modalHeight !important;
					width: @modalWidth !important;
					max-width: 100% !important;
					.mix-getFlipperTransformValue(@flipFromRight, false);

					.@{base}__back {
						box-shadow: 0 0.5rem 1.5rem rgba(0, 0, 0, 0.3);
					}
				}
			}
		}

		&__front,
		&__back {
			float: left;
			height: inherit;
			width: inherit;
			overflow-y: auto;
			position: relative;
			will-change: max-height;
			transition: max-height 0s (@duration * 0.4);
			transition-timing-function: cubic-bezier(0.6, 0, 0.2, 1.3);
		}

		&__front {
			background-color: @bgFront;
			margin-right: -100%;
			max-height: 100vh;

			.@{base}--flipped & {
				max-height: 0;
			}
		}
		&__back {
			background-color: @bgBack;
			max-height: 0 !important;
			.mix-getFlipperTransformValue(@flipFromRight, true);

			.@{base}--flipped & {
				max-height: 100vh !important;
			}
		}
		// Flipper modals.
		&__modals {
			pointer-events: none;
			will-change: auto;

			&--active {
				perspective: 1000px;
				position: fixed;
				left: 0;
				bottom: 0;
				top: 0;
				right: 0;
				z-index: 20;
			}
		}
	}
}

.mix-getFlipperTransformValue(@flipFromRight: true, @open: true) {
	& when (@flipFromRight = true) and (@open = true) {
		transform: rotateY(180deg) translate(50%, -50%);
	}
	& when not (@flipFromRight = true) and not (@open = true) {
		transform: rotateY(180deg) translate(0, 0);
	}
	& when (@flipFromRight = true) and not (@open = true) {
		transform: rotateY(-180deg) translate(0, 0);
	}
	& when not (@flipFromRight = true) and (@open = true) {
		transform: rotateY(-180deg) translate(50%, -50%);
	}
}
